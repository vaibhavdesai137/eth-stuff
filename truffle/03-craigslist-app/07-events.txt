
------------------------------------------------------------------------------------------------------------------------------

# Events are simply logs that can be attached to a txn to capture more details about the txn
# i.e the business reasoning behind the txn to be created

# Also, if multiple users are on their browsers interacting with smart contract, then they all will have to keep refreshing their page to check fir new listings
# We can use events (logs) and automatically render new listings on the page

------------------------------------------------------------------------------------------------------------------------------

# Run "truffle migrate" to deploy the contract
# Then "truffle console"

truffle(development)> Craigslist.deployed().then(function(instance) { app = instance });

# Register a watcher for the event
# The 1st {} ---> for filters on the event data itself (we cann filetr on seller since our contract indexes that)
# The 2nd {} ---> for filters on the blockhain event

truffle(development)> var itemListedEventWatcher = app.itemListedEvent({}, {fromBlock: 0, toBlock: 'latest'}).watch(function(err, event){console.log(event)});
undefined

# List an item and see if the event is captured
truffle(development)> app.listItem("some-item", "some-item-desc", web3.toWei(10,"ether"), {from: web3.eth.accounts[0]});
{ tx: '0x738cc238214b0784dfcd5d4452469b06b7de5428576a04a024d5189b07f43d6d',
  receipt: 
   { transactionHash: '0x738cc238214b0784dfcd5d4452469b06b7de5428576a04a024d5189b07f43d6d',
     ...
     logs: [ [Object] ] },
  logs: 
   [ { logIndex: 0,
       transactionIndex: 0,
       ...
       event: 'itemListedEvent',
       args: [Object] } ] }

# And since we registered a callback with the event, the event details get logged to console       
truffle(development)> { logIndex: 0,
  transactionIndex: 0,
  transactionHash: '0x738cc238214b0784dfcd5d4452469b06b7de5428576a04a024d5189b07f43d6d',
  blockHash: '0xf8581816f090ab0b7a0783f0355a533ead40bf257e4b26c61b11f4a23f885dcf',
  blockNumber: 14,
  address: '0xd3255156d2c9c92799e7db35a3c89bfa6b2fbf13',
  type: 'mined',
  event: 'itemListedEvent',
  args: 
   { _seller: '0x00d1ae0a6fc13b9ecdefa118b94cf95ac16d4ab0',
     _name: 'some-item',
     _desc: 'some-item-desc',
     _price: { [String: '10000000000000000000'] s: 1, e: 19, c: [Object] } } }

# Stop watching
itemListedEventWatcher.stopWatching();

------------------------------------------------------------------------------------------------------------------------------

# Add a new test case in test/CraigslistHappyPath.js
# Run "truffle test"
# Using network 'development'.
# Contract: Craigslist
#     ✓ all variables should all be empty
#     ✓ all variables should have correct values (88ms)
#     ✓ should trigger an event when a new item is listed (153ms)
# 3 passing (298ms)

------------------------------------------------------------------------------------------------------------------------------
